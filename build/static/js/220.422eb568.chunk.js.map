{"version":3,"file":"static/js/220.422eb568.chunk.js","mappings":"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","sources":["pages/Login.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport type { FormProps } from 'antd';\r\nimport { Button, Checkbox, Form, Input, Layout, message } from 'antd';\r\nimport '@/styles/global.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchRegisterApi, fetchLoginApi } from '@/store/modules/userStore';\r\nimport { AxiosError } from 'axios';\r\nconst { Content } = Layout;\r\n\r\ntype FieldType = {\r\n  email?: string;\r\n  name?: string;\r\n  password?: string;\r\n  remember?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n};\r\n\r\nconst Login: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const onFinishLogin: FormProps<FieldType>['onFinish'] = async (values) => {\r\n    try {\r\n      await dispatch(fetchLoginApi(values.email as string, values.password as string));\r\n      message.success('Login successful');\r\n      navigate('/quiz');\r\n    } catch (error) {\r\n      console.log(error);\r\n      if (error instanceof AxiosError) {\r\n        message.error(error.response?.data?.error);\r\n      } else {\r\n        message.error('Failed to login');\r\n      }\r\n    }\r\n  };\r\n\r\n  const onFinishRegister: FormProps<FieldType>['onFinish'] = async (values) => {\r\n    console.log('Success:', values);\r\n    try {\r\n      await dispatch(\r\n        fetchRegisterApi(\r\n          values.email as string,\r\n          values.password as string,\r\n          values.firstName as string,\r\n          values.lastName as string\r\n        )\r\n      );\r\n      message.success('Register successful');\r\n      navigate('/');\r\n    } catch (error: any) {\r\n      message.error(error.response.data.error);\r\n    }\r\n  };\r\n\r\n  const onFinishFailed: FormProps<FieldType>['onFinishFailed'] = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const [isRegister, setIsRegister] = useState(false);\r\n\r\n  return (\r\n    <Layout style={{ minHeight: '100vh', backgroundColor: '#f0f2f5' }}>\r\n      <Content style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n        <div\r\n          style={{\r\n            width: 400,\r\n            padding: 24,\r\n            backgroundColor: 'white',\r\n            borderRadius: 4,\r\n            boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)',\r\n          }}\r\n        >\r\n          <h1 style={{ textAlign: 'center', marginBottom: 24 }}>\r\n            {isRegister ? 'Register' : 'Login'}\r\n          </h1>\r\n\r\n          {/* Login Form */}\r\n          <Form\r\n            name=\"loginForm\"\r\n            labelCol={{ span: 6 }}\r\n            wrapperCol={{ span: 18 }}\r\n            style={{ maxWidth: 600, display: isRegister ? 'none' : 'block' }}\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinishLogin}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n          >\r\n            <Form.Item<FieldType>\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              rules={[\r\n                { required: true, message: 'Please input your email!' },\r\n                { type: 'email', message: 'Please enter a valid email address!' },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FieldType>\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              rules={[\r\n                { required: true, message: 'Please input your password!' },\r\n                {\r\n                  pattern: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/,\r\n                  message:\r\n                    'Password must be at least 8 characters long and contain at least 1 letter, 1 number',\r\n                },\r\n              ]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FieldType>\r\n              name=\"remember\"\r\n              valuePropName=\"checked\"\r\n              wrapperCol={{ offset: 6, span: 24 }}\r\n            >\r\n              <Checkbox>Remember me</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item wrapperCol={{ offset: 6, span: 24 }}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Login\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n\r\n          {/* Register From */}\r\n          <Form\r\n            name=\"registerForm\"\r\n            labelCol={{ span: 6 }}\r\n            wrapperCol={{ span: 18 }}\r\n            style={{ maxWidth: 600, display: isRegister ? 'block' : 'none' }}\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinishRegister}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n          >\r\n            <Form.Item<FieldType>\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              rules={[\r\n                { required: true, message: 'Please input your email!' },\r\n                { type: 'email', message: 'Please enter a valid email address!' },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FieldType> label=\"Name\">\r\n              <Input.Group compact>\r\n                <Form.Item\r\n                  name=\"firstName\"\r\n                  noStyle\r\n                  rules={[{ required: true, message: 'Please input your first name!' }]}\r\n                >\r\n                  <Input style={{ width: '50%' }} placeholder=\"First Name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  name=\"lastName\"\r\n                  noStyle\r\n                  rules={[{ required: true, message: 'Please input your last name!' }]}\r\n                >\r\n                  <Input style={{ width: '50%' }} placeholder=\"Last Name\" />\r\n                </Form.Item>\r\n              </Input.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item<FieldType>\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              rules={[{ required: true, message: 'Please input your password!' }]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FieldType>\r\n              name=\"remember\"\r\n              valuePropName=\"checked\"\r\n              wrapperCol={{ offset: 6, span: 24 }}\r\n            >\r\n              <Checkbox>Remember me</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item wrapperCol={{ offset: 6, span: 24 }}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Register\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n\r\n          {/* Register and Forgot Password button */}\r\n          <Button\r\n            type=\"link\"\r\n            style={{ marginLeft: '5rem' }}\r\n            onClick={() => setIsRegister(!isRegister)}\r\n          >\r\n            {isRegister ? 'Login' : 'Register'}\r\n          </Button>\r\n          <Button type=\"link\">Forgot Password?</Button>\r\n        </div>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["Content","Layout","Login","navigate","useNavigate","dispatch","useDispatch","onFinishFailed","errorInfo","console","log","isRegister","setIsRegister","useState","_jsx","style","minHeight","backgroundColor","children","display","justifyContent","alignItems","_jsxs","width","padding","borderRadius","boxShadow","textAlign","marginBottom","Form","name","labelCol","span","wrapperCol","maxWidth","initialValues","remember","onFinish","async","fetchLoginApi","values","email","password","message","success","error","_error$response","_error$response$data","AxiosError","response","data","autoComplete","Item","label","rules","required","type","Input","pattern","Password","valuePropName","offset","Checkbox","Button","htmlType","fetchRegisterApi","firstName","lastName","Group","compact","noStyle","placeholder","marginLeft","onClick"],"sourceRoot":""}